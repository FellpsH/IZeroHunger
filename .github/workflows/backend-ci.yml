name: Backend CI/CD

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'back/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'back/**'

jobs:
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: zero_hunger_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 📦 Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: 🔧 Make gradlew executable
      run: chmod +x back/gradlew

    - name: 🏗️ Build with Gradle
      run: |
        cd back
        ./gradlew build --no-daemon

    - name: 🧪 Run tests
      run: |
        cd back
        ./gradlew test --no-daemon

    - name: 📊 Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: 📋 Backend Test Results
        path: back/build/test-results/test/*.xml
        reporter: java-junit

    - name: 📈 Upload coverage to Codecov
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: back/build/reports/jacoco/test/jacocoTestReport.xml
        flags: backend
        name: backend-coverage

    - name: 🏷️ Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: back/build/libs/*.jar
        retention-days: 30

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 🔍 Run OWASP Dependency Check
      run: |
        cd back
        chmod +x gradlew
        ./gradlew dependencyCheckAnalyze --no-daemon

    - name: 📤 Upload OWASP report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: owasp-report
        path: back/build/reports/dependency-check-report.html

  code-quality:
    name: 📏 Code Quality
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 📦 Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: 🔍 SonarCloud Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        cd back
        chmod +x gradlew
        ./gradlew sonarqube --no-daemon
      continue-on-error: true

  build-docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      if: github.event_name != 'pull_request' && secrets.DOCKER_USERNAME != ''
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./back
        file: ./back/Dockerfile
        push: ${{ github.event_name != 'pull_request' && secrets.DOCKER_USERNAME != '' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/izero-hunger-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/izero-hunger-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [test, security, code-quality, build-docker]
    if: always()

    steps:
    - name: 📧 Notify on success
      if: needs.test.result == 'success'
      run: |
        echo "✅ Backend pipeline completed successfully!"
        echo "🧪 Tests: ${{ needs.test.result }}"
        echo "🔒 Security: ${{ needs.security.result }}"
        echo "📏 Quality: ${{ needs.code-quality.result }}"
        echo "🐳 Docker: ${{ needs.build-docker.result }}"

    - name: ❌ Notify on failure
      if: needs.test.result == 'failure'
      run: |
        echo "❌ Backend pipeline failed!"
        echo "Check the logs for more details."
        exit 1
